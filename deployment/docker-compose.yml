version: '3.8'

services:
  server:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
    image: victoury-mcp-server:${TAG:-latest}
    container_name: victoury-mcp-${ENVIRONMENT:-production}-server
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VICTOURY_API_URL=${VICTOURY_API_URL}
      - VICTOURY_API_KEY=${VICTOURY_API_KEY}
      - VICTOURY_API_SECRET=${VICTOURY_API_SECRET}
      - VICTOURY_API_TIMEOUT=${VICTOURY_API_TIMEOUT:-30000}
      - MCP_PORT=${MCP_PORT:-3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "${HOST_PORT:-3000}:${MCP_PORT:-3000}"
    volumes:
      - victoury-mcp-logs:/app/logs
    networks:
      - victoury-mcp-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({host:'localhost',port:${MCP_PORT:-3000},path:'/health'}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1)).end()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

networks:
  victoury-mcp-network:
    driver: bridge
    name: victoury-mcp-${ENVIRONMENT:-production}

volumes:
  victoury-mcp-logs:
    name: victoury-mcp-${ENVIRONMENT:-production}-logs